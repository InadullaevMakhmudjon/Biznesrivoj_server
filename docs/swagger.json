{
  "swagger": "2.0",
  "info": {
    "version": "0.0.1",
    "title": "BiznesRivoj",
    "description": "This is a simple documentation for biznesrivoj",
    "contact": {
      "name": "+998994287668"
    },
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3030",
  "tags": [
    {
      "name": "Auth",
      "description": "Authontication endpoints"
    },
    {
      "name": "Home",
      "description": "Home endpoints"
    },
    {
      "name": "Users",
      "description": "User endpoints"
    },
    {
      "name": "Articles",
      "description": "Article endpoints"
    },
    {
      "name": "Categories",
      "description": "Category endpoints"
    },
    {
      "name": "Files",
      "description": "File endpoints"
    },
    {
      "name": "Verify",
      "description": "Verification endpoints"
    },
    {
      "name": "Bookmarks",
      "description": "Bookmarks endpoints"
    },
    {
      "name": "Courses",
      "description": "Courses endpoints"
    },
    {
      "name": "Telegram",
      "description": "Telegram bot endpoints"
    }
  ],
  "definitions": {
    "AuthLogin": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserCreate": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "secondname": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "genderId": {
          "type": "integer",
          "format": "base64"
        },
        "image": {
          "type": "string"
        },
        "quote": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "roleId": {
          "type": "integer",
          "format": "base64"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "secondname": {
          "type": "string"
        }
      }
    },
    "ArticleCreate": {
      "type": "object",
      "properties": {
        "metaFields": {
          "type": "string"
        },
        "image": {
          "type": "string",
          "description": "Image should be link"
        },
        "slug": {
          "type": "string",
          "description": "Slug should be unique"
        },
        "title_uz": {
          "type": "string"
        },
        "title_kr": {
          "type": "string"
        },
        "body_uz": {
          "type": "string"
        },
        "body_kr": {
          "type": "string"
        },
        "description_uz": {
          "type": "string"
        },
        "description_kr": {
          "type": "string"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "base64"
          },
          "example": [
            1,
            2
          ]
        }
      }
    },
    "ArticleUpdate": {
      "type": "object",
      "properties": {
        "metaFields": {
          "type": "string"
        }
      }
    },
    "CategoryCreate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "desc_uz": {
          "type": "string"
        },
        "desc_ru": {
          "type": "string"
        }
      }
    },
    "VerificationSend": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+998123456789"
        }
      }
    },
    "Verify": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+998123456789"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "BookCreate": {
      "type": "object",
      "properties": {
        "title_kr": {
          "type": "string"
        },
        "title_lat": {
          "type": "string"
        },
        "description_kr": {
          "type": "string"
        },
        "description_lat": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "point": {
          "type": "integer"
        },
        "deliveryTypeId": {
          "type": "number",
          "default": 2,
          "description": "1 for free delivery and 2 for paid delivery type."
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BookUpdate": {
      "type": "object",
      "properties": {
        "title_kr": {
          "type": "string"
        },
        "title_lat": {
          "type": "string"
        }
      }
    },
    "GiftCreate": {
      "type": "object",
      "properties": {
        "title_kr": {
          "type": "string"
        },
        "title_lat": {
          "type": "string"
        },
        "description_kr": {
          "type": "string"
        },
        "description_lat": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "bonus": {
          "type": "number"
        },
        "deadline": {
          "type": "string"
        }
      }
    },
    "GiftUpdate": {
      "type": "object",
      "properties": {
        "title_kr": {
          "type": "string"
        },
        "title_lat": {
          "type": "string"
        }
      }
    },
    "SendMessage": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "number"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "DeliveryPriceUpdate": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number"
        }
      }
    }
  },
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/api/auth/login": {
      "get": {
        "summary": "User default token endpont",
        "description": "Returns a token for default user",
        "tags": [
          "Auth"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "User login endpoint",
        "description": "Returns a token and updates lastLoggedIn prop to user model",
        "tags": [
          "Auth"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "description": "Exist phone number and respect password required",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "User logout endpoint",
        "description": "Only for updating User's lastLoggedOut prop",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/details": {
      "get": {
        "summary": "User details endpoint",
        "description": "Gets current user's details",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/home": {
      "get": {
        "summary": "Home endpoint",
        "description": "Gets necessary data for home view",
        "tags": [
          "Home"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "All users endpoint",
        "description": "Gets all users",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "User create endpoint",
        "description": "Creates a user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Returns 201 status if is created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/editors": {
      "get": {
        "summary": "All editor users endpoint",
        "description": "Gets all editors",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/exists": {
      "post": {
        "summary": "Checks user exists by phone number",
        "description": "Checks the user whether exist, if exist you get 200 status code, if doesn't exist then 204 status code",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "query",
            "name": "phone",
            "required": true,
            "type": "string",
            "description": "phone number without '+' sign."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "A user endpoint",
        "description": "Gets a users",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to get",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "User update endpoint",
        "description": "Updates the user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to update",
            "required": true,
            "type": "integer",
            "format": "base64"
          },
          {
            "in": "body",
            "name": "Body",
            "description": "You can send as many user props as you want to update at the same time",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Users delete endpoint",
        "description": "Delets a user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to delete",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{id}/articles": {
      "get": {
        "summary": "Articles of the user",
        "description": "Gets all articles belong to the user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to get",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{id}/bookmarks": {
      "get": {
        "summary": "Bookmarks of the user",
        "description": "Gets all bookmarks belong to the user, is not accessible for default user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to get",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/articles": {
      "get": {
        "summary": "All articles endpoint",
        "description": "Gets all articles. you can give `createdAt`, `likes`, `views` params with values either *ASC* or *DESC* and pagination props `limit` and `page`. *ex:* */articles?likes=ASC, /articles?createdAt=DESC*",
        "tags": [
          "Articles"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Article create endpoint",
        "description": "Creates an article",
        "tags": [
          "Articles"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Returns 201 status if is created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArticleCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/articles/{slug}": {
      "get": {
        "summary": "An article endpoint",
        "description": "Gets an article",
        "tags": [
          "Articles"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "slug",
            "description": "Slug of the article to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Article update endpoint",
        "description": "Updates the article",
        "tags": [
          "Articles"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "slug",
            "description": "Slug of the article to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Body",
            "description": "You can send as many article props as you want to update at the same time",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArticleUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Articles delete endpoint",
        "description": "Delets an article",
        "tags": [
          "Articles"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "slug",
            "description": "Slug of the article to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/articles/like/{id}": {
      "post": {
        "summary": "Article like endpoint",
        "description": "Increases number of likes the article",
        "tags": [
          "Articles"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the article to post like",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "summary": "All categories endpoint",
        "description": "Gets all categories",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          }
        }
      },
      "post": {
        "summary": "Category create endpoint",
        "description": "Creates a category",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Returns 201 status if is created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "summary": "A category endpoint",
        "description": "Gets a category",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the category to get",
            "type": "integer",
            "format": "base64",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "A category update endpoint",
        "description": "Updates a category",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the category to update",
            "type": "integer",
            "format": "base64",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Returns 200 if is updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "A category delete endpoint",
        "description": "Deletes a category",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the category to delete",
            "type": "integer",
            "format": "base64",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/categories/{id}/articles": {
      "get": {
        "summary": "Articles of category endpoint",
        "description": "Gets all articles belongs to the category. you can give `createdAt`, `likes`, `views` params with values either *ASC* or *DESC* and pagination props `limit` and `page`. *ex:* */articles?likes=ASC, /articles?createdAt=DESC*",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the category to get",
            "type": "integer",
            "format": "base64",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/files": {
      "get": {
        "summary": "All files endpoint",
        "description": "Gets All files",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "post": {
        "summary": "File create endpoint",
        "description": "Creates a file",
        "tags": [
          "Files"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "formData",
            "type": "file",
            "name": "file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/files/{id}": {
      "delete": {
        "summary": "File delete endpoint",
        "description": "Delets a File",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to delete",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/files/today": {
      "get": {
        "summary": "All files created today endpoint",
        "description": "Gets all files created today",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/files/id/{id}": {
      "get": {
        "summary": "A file endpoint",
        "description": "Gets a File",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to delete",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/verify/send": {
      "post": {
        "summary": "Send verification code endpoint",
        "description": "Sends a verification code to the phone number, `!Only 5 times attempts are allowed`",
        "tags": [
          "Verify"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Exist phone number and respect password required",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationSend"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/verify": {
      "post": {
        "summary": "Verify phone number endpoint",
        "description": "Verifies phone number by sent code",
        "tags": [
          "Verify"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Exist phone number and respect password required",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Verify"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/bookmarks": {
      "get": {
        "summary": "All bookmarks endpoint",
        "description": "Gets all bookmarks belong to the user given token. you can give `createdAt` params with values either *ASC* or *DESC* and pagination props `limit` and `page`. *ex:* /articles?createdAt=DESC*",
        "tags": [
          "Bookmarks"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete all bookmarks endpoint",
        "description": "Deletes all bookmarks belong to the user given token, usage for clear bookmarks",
        "tags": [
          "Bookmarks"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/bookmarks/{id}": {
      "get": {
        "summary": "a bookmark endpoint",
        "description": "Gets a bookmark on given id",
        "tags": [
          "Bookmarks"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the bookmark to get",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Bookmark create endpoint",
        "description": "Requires article id to create a bookmark.",
        "tags": [
          "Bookmarks"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the article to make bookmark",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Bookmark delete endpoint",
        "description": "Deletes a bookmark",
        "tags": [
          "Bookmarks"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the bookmark to delete",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/bookmarks/user/{id}": {
      "get": {
        "summary": "User bookmarks endpoint",
        "description": "Gets all bookmark on given user",
        "tags": [
          "Bookmarks"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to get all bookmarks",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/bookmarks/article/{id}": {
      "get": {
        "summary": "Article bookmarks endpoint",
        "description": "Gets all bookmark on given article",
        "tags": [
          "Bookmarks"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the article to get all bookmarks",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/courses": {
      "get": {
        "summary": "Courses endpoint",
        "description": "Gets all articles. you can give `createdAt` param with values either ASC or DESC and pagination props limit and page. ex:/courses?createdAt=DESC",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All courses"
          }
        }
      }
    },
    "/api/telegram/users": {
      "get": {
        "summary": "Get telegram users endpoint",
        "description": "Gets all telegram useres",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/users/{id}": {
      "get": {
        "summary": "A User endpoint",
        "description": "Gets a user",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to get",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/users/{id}/getGifts": {
      "get": {
        "summary": "A User's gifts endpoint",
        "description": "Gets all gifts belong to the user",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to get all gifts belong",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/gifts": {
      "get": {
        "summary": "Get gifts endpoint",
        "description": "Gets all gifts",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Gift create endpoint",
        "description": "Creates a gift",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Returns 201 status if is created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GiftCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/gifts/{id}": {
      "get": {
        "summary": "A Gift endpoint",
        "description": "Gets a gift",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the gift to get",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Gift update endpoint",
        "description": "Updates the gift",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the Gift to update",
            "required": true,
            "type": "integer",
            "format": "base64"
          },
          {
            "in": "body",
            "name": "Body",
            "description": "You can send as many book props as you want to update at the same time",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GiftUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/gifts/afford/{point}": {
      "get": {
        "summary": "Affordable Gifts endpoint",
        "description": "Gets all affordable gifts by given point",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "point",
            "description": "Point that gets less pointed gifts",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/books": {
      "get": {
        "summary": "Get books endpoint",
        "description": "Gets all books",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Book create endpoint",
        "description": "Creates a book",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Returns 201 status if is created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/books/{id}": {
      "get": {
        "summary": "A Book endpoint",
        "description": "Gets a book",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the book to get",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Book update endpoint",
        "description": "Updates the book",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the user to update",
            "required": true,
            "type": "integer",
            "format": "base64"
          },
          {
            "in": "body",
            "name": "Body",
            "description": "You can send as many book props as you want to update at the same time",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/orders": {
      "get": {
        "summary": "Get orders endpoint",
        "description": "Gets all orders",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/orders/{id}": {
      "get": {
        "summary": "An Order endpoint",
        "description": "Gets an order",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the order to get",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/orders/{id}/waiting": {
      "post": {
        "summary": "Order update endpoint",
        "description": "Updates an order status to waiting",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the order to update",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/orders/{id}/done": {
      "post": {
        "summary": "An Order endpoint",
        "description": "Updates an order status to done",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the order to update",
            "required": true,
            "type": "integer",
            "format": "base64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/deliveryTypes": {
      "get": {
        "summary": "Get all delivery types endpoint",
        "description": "Gets all delivery types",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/deliveryTypes/{id}": {
      "post": {
        "summary": "A delivery price update endpoint",
        "description": "Updates the deliver price",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "Id of the order to update",
            "required": true,
            "type": "integer",
            "format": "base64"
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Returns 200 status if is updates",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeliveryPriceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/telegram/bot/sendMessage": {
      "post": {
        "summary": "Sends message endpoint",
        "description": "Sends message to the user",
        "tags": [
          "Telegram"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Header",
            "required": true
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Returns 201 status if is sent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  }
}